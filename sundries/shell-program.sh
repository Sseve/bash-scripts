#!/bin/bash

# shell base


##### 正则表达式 #####
# 以下的正则字符适用于shell命令如grep,awk,sed(bash本身不支持正则表达,但支持一些通配符)
# 普通字符: 字符表达的意义就是其本身, 如: 字符a就是表达字符a的意思
# 元字符: 字符表达的意义有特殊含义, 
#        * -- 多个在*字符之前的那个普通字符
#        . -- 匹配任意一个字符
#        ^ -- 匹配行首,表示行首是^后面的那个字符
#        $ -- 匹配行尾,表示行尾是$前面的那个字符
#       ^$ -- 匹配空行
#      ^.$ -- 匹配一个字符的行
#       [] -- 匹配字符集合,支持穷举表示,范围表示,如:[abcde]或者[a-e],表示匹配a到e中的一个字符
#      [^] -- 取反[]中的字符,即匹配除了[]中以外的任意字符
#        \ -- 转义符号,用于屏蔽元字符的特殊意义.
#     \<\> -- 精确匹配,如 \<the\>匹配the这个单词  
#     \{\} -- 匹配前一个字符重复的次数，如: \{n\}匹配前一个字符出现n次;\{n,\}匹配前一个字符至少出现n次,\{n,m\}匹配前一个字符出现n到m次
# 正则表达式扩展:
#        ? -- 匹配前一个字符0次或1次
#        + -- 匹配前一个字符1次或多次
#       () -- 与|结合使用表示一组可选的字符集合,如:lov(1|2|3)e,表示匹配lov1e,lov2e,lov3e
#        | -- 表示多个正则表达式的或关系, re1 | re2 | re3

##### bash通配符 #####
#        * -- 表示任意位置的任意字符
#        ? -- 表示任意一个字符
#        ^ -- 取反
#       [] -- 表示某个范围内
#      [^] -- 表示某个范围以外
#       {} -- 表示一组表达式的集合, {[a-z]*.txt, b?.sh}

##### 变量 #####
# 单引号内的字符不能表达特殊意义;双引号内的字符可以表达特殊的意义,并且可以进行变量替换
# 本地变量: 用户当前shell生命周期的脚本中使用的变量,会随着shell消亡而无效,在新启动的shell也无效
# 环境变量：环境变量在用户登陆到注销之前对所有编辑器,脚本,程序和应用都有效(env命令查看当前环境变量的值)
# 位置参数: 用于向shell脚本传递参数 $0 $1 $2 ...${10} $@ $* $#
# shell变量同时有数值型和字符型两种,数值型初始值是0,字符型初始值为空,而且可以不用事先定义就直接使用.
# 变量赋值: var_name=value 或者 ${va_name=value}
# 取变量的值: ${variable}
# unset 变量名  --  清除变量的值
#          :=  --  对已经赋值过的变量不再赋值,如果变量没有赋值就给变量赋值并保留值,如: ${colour:=red}  echo ${colour} => red
#          :-  --  对已经赋值过的变量不再赋值,如果变量没有赋值就给变量赋值但不保留,如: ${colour:-red}  echo ${colour} => 什么都没有，为空
#      :?或者?  --  测试变量是否被赋值,如果没赋值会报错
#    readonly  --  设置只读变量, colour=black && readonly colour 或者 declare -r colour=red 或者 typeset -r colour=green
# 环境变量定义: export var_name